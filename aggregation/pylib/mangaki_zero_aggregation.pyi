from typing import Tuple, Any, Dict, Mapping

# TODO: When Python 3.10 is GA, TypeAlias becomes available.

# UserInput: TypeAlias = Round0 | Round1 | Round2 | Round3 | Round4
Messages = Mapping[int, Any] # UserInput
Vector = list[int]
SignPublicKey = bytes
SignSecretKey = bytes
ServerOutputSerialized = Messages | Vector

class PublicKeysWrapper:
    def insert(self, u: int, pk: SignPublicKey) -> None: ...

class UserWrapper:
    def __new__(cls, id: int, threshold: int, sign_pk: SignPublicKey, sign_sk: SignSecretKey, vec: list[int], others_sign_pks: PublicKeysWrapper) -> 'UserWrapper': ...
    def serialize_state(self) -> str: ...
    def recover_state(self, state: str) -> None: ...
    def round(self, input: bytes) -> bytes: ...

class ServerOutputWrapper:
    def __new__(cls, wrapped: ServerOutputSerialized) -> 'ServerOutputWrapper': ...
    def is_messages(self) -> bool: ...
    def is_vector(self) -> bool: ...
    def get_messages(self, arg: Any) -> Dict[int, bytes]: ...
    def get_vector(self) -> list[int]: ...

class ServerWrapper:
    def __new__(cls, threshold: int, vec_len: int) -> 'ServerWrapper': ...
    def serialize_state(self) -> str: ...
    def recover_state(self, state: str) -> None: ...
    def recv(self, id: int, input: list[int]) -> None: ...
    def round(self) -> ServerOutputWrapper: ...

def round0_msg(msg: Any) -> bytes: ...
def gen_keypair() -> Tuple[SignPublicKey, SignSecretKey]: ...
